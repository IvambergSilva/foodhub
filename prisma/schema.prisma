generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                  String                   @id @default(uuid())
  name                String
  imageUrl            String
  deliveryFee         Decimal                  @db.Decimal(10, 2)
  deliveryTimeMinutes Int
  ratings             Decimal                  @db.Decimal(10, 1)
  categories          Category[]
  products            Product[]
  orders              Order[]
  userFavorite        UserFavoriteRestaurant[]

  @@map("restaurants")
}

model UserFavoriteRestaurant {
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  restaurantId String
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime    @default(now())

  @@id([userId, restaurantId])
  @@map("user-favorite-restaurant")
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  createdAt   DateTime     @default(now())
  restaurants Restaurant[]
  products    Product[]

  @@map("categories")
}

model Product {
  id                 String         @id @default(uuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal        @db.Decimal(10, 2)
  discountPercentage Int            @default(0)
  restaurantId       String
  restaurant         Restaurant     @relation(fields: [restaurantId], references: [id])
  categoryId         String
  category           Category       @relation(fields: [categoryId], references: [id])
  orderProducts      OrderProduct[]
  createdAt          DateTime       @default(now())

  @@map("products")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@map("orders-product")
}

model Order {
  id                  String         @id @default(uuid())
  userId              String
  user                User           @relation(fields: [userId], references: [id])
  restaurant          Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId        String         @unique
  deliveryFee         Decimal        @db.Decimal(10, 2)
  status              OrderStatus
  deliveryTimeMinutes Int
  subTotalPrice       Decimal        @db.Decimal(10, 2)
  totalPrice          Decimal        @db.Decimal(10, 2)
  totalDiscount       Decimal        @db.Decimal(10, 2)
  createdAt           DateTime       @default(now())
  products            OrderProduct[]

  @@map("orders")
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  DELIVERING
  CANCELED
  COMPLETED
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Order                  Order[]
  UserFavoriteRestaurant UserFavoriteRestaurant[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
